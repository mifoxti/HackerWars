# bot.py
import asyncio
from datetime import datetime, timedelta
import json
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from aiogram.types import ReplyKeyboardRemove
import app.keyboards as kb
from aiogram import F


class fsm(StatesGroup):
    reg = State()
    name = State()
    fraction = State()
    menu = State()
    web = State()
    profile = State()
    fight = State()
    tasks = State()
    settings = State()
    shop = State()
    add_art = State()
    buy = State()
    tasks_init = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.json
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

TOKEN = config['telegram']['api_token']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
db_filename = 'users.db'


def create_users_table():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'users' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
    –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –≤ –∏–≥—Ä–µ.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            full_name TEXT,
            game_name TEXT,
            money INTEGER,
            faction TEXT,
            level INTEGER,
            experience INTEGER,
            attack INTEGER,
            defense INTEGER,
            camouflage INTEGER,
            search INTEGER,
            agility INTEGER,
            endurance INTEGER
        )
    ''')
    conn.commit()
    conn.close()


def create_artifacts_table():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'artifacts' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
    –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS artifacts (
            id INTEGER PRIMARY KEY,
            name TEXT,
            cost INTEGER,
            attack INTEGER,
            defense INTEGER,
            camouflage INTEGER,
            search INTEGER,
            agility INTEGER,
            endurance INTEGER,
            req_lvl INTEGER
        )
    ''')
    conn.commit()
    conn.close()


def create_user_artifacts_table():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'user_artifacts' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
    –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_artifacts (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            artifact_id INTEGER,
            FOREIGN KEY(user_id) REFERENCES users(user_id),
            FOREIGN KEY(artifact_id) REFERENCES artifacts(id)
        )
    ''')
    conn.commit()
    conn.close()


def register_user(user: types.User, game_name: str, faction: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO users (
            user_id, username, full_name, game_name, money, faction,
            level, experience, attack, defense, camouflage,
            search, agility, endurance
        ) VALUES (?, ?, ?, ?, 1000, ?, 1, 0, 0, 0, 0, 0, 0, 0)
    ''', (user.id, user.username, user.full_name, game_name, faction))
    conn.commit()
    conn.close()


@dp.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–∏—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–∫ —Ö–∞–∫–µ—Ä–æ–≤ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å "
                         "–Ω–∞ –ø–∞—Ä—É –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞—á–Ω–µ–º?", reply_markup=kb.start)


@dp.callback_query(F.data == 'reg')
async def reg_into(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(menu=callback.message.text)
    await command_reg_handler(callback.message, state)


@dp.message(fsm.reg)
async def command_reg_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–≥—Ä–æ–≤–æ–µ –∏–º—è –∏ –≤—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    create_users_table()
    create_artifacts_table()
    create_user_artifacts_table()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.", reply_markup=kb.main_menu)
        await state.set_state(fsm.menu)
        return
    await state.set_state(fsm.name)
    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –∏–º—è:")


@dp.message(fsm.profile)
async def stats_command_handler(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏–≥—Ä–µ.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_message = (
        f"üë§ {hbold(user_data[4])} ({user_data[6]}):\n"
        f"üíø –£—Ä–æ–≤–µ–Ω—å: {user_data[7]}\n"
        f"üí° –û–ø—ã—Ç: {user_data[8]}\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {user_data[5]}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {user_data[9]}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {user_data[10]}\n"
        f"üì∫ –ö–∞–º—É—Ñ–ª—è–∂: {user_data[11]}\n"
        f"üî≠ –ü–æ–∏—Å–∫: {user_data[12]}\n"
        f"üíª –õ–æ–≤–∫–æ—Å—Ç—å: {user_data[13]}\n"
        f"üîã –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data[14]}\n"
    )
    await state.set_state(fsm.menu)
    await message.answer(stats_message)


@dp.message(fsm.name)
async def reg_name_handler(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(name=message.text)
        await state.set_state(fsm.fraction)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é:', reply_markup=kb.main)
    else:
        await state.clear()
        await message.answer('–ù—É, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –Ω–µ –≤—Å–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ—ë –∏–º—è....',
                             reply_markup=ReplyKeyboardRemove())


@dp.message(fsm.fraction)
async def reg_fraction_handler(message: Message, state: FSMContext):
    if message.text in ["üé≠ Phantoms", "‚òÆÔ∏è Liberty", "üí† Aegis", "üóø NotFounds"]:
        await state.update_data(fraction=message.text)
        data = await state.get_data()
        register_user(message.from_user, data['name'], data['fraction'])
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ò–º—è: {data["name"]}\n–§—Ä–∞–∫—Ü–∏—è: {data["fraction"]}',
                             reply_markup=kb.main_menu)
        await state.set_state(fsm.menu)
    else:
        await message.answer(f'–¢—ã –¥–∞–∂–µ —Å —Ç–∞–∫–∏–º –ø—Ä–æ—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è...\n–ö–∞–∫–æ–π –∏–∑ —Ç–µ–±—è —Ö–∞–∫–µ—Ä')
        await state.clear()


@dp.message(fsm.menu)
async def menu_handler(message: Message, state: FSMContext):
    if message.text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üåê –°–µ—Ç—å", "üó° –ë–∏—Ç–≤–∞", "‚åõÔ∏è –î–µ–ª–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            await state.update_data(menu=message.text)
            await stats_command_handler(message, state)
        elif message.text == "üåê –°–µ—Ç—å":
            await message.answer(f'–°–µ—Ç—å - –æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–æ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.\n\n'
                                 f'üè™–ú–∞–≥–∞–∑–∏–Ω\n'
                                 f'–ù–∞ –ø—Ä–∏–ª–∞–≤–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞—Ä–∞—Ö–æ–ª–æ–∫ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n'
                                 f'üé™–ö–∞–∑–∏–Ω–æ\n'
                                 f'–û—á–µ–Ω—å –æ–ø–∞—Å–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–∞—Å –±–æ–≥–∞—á–µ, —Ç–∞–∫ –∏ –ª–∏—à–∏—Ç—å –≤—Å–µ—Ö –¥–µ–Ω–µ–≥, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å.\n',
                                 reply_markup=kb.web_menu)
            await state.set_state(fsm.web)
        elif message.text == "‚åõÔ∏è –î–µ–ª–∞":
            await message.answer(f'–•–∞–∫–µ—Ä - —Ç–æ–∂–µ —á–µ–ª–æ–≤–µ–∫, –∞ –∑–Ω–∞—á–∏—Ç –∏ –æ–±—ã—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å—Å—è.')
            await state.update_data(menu=message.text)
            await tasks(message, state)
    elif message.text.split(' ')[0] == '/add_artifact' and message.from_user.id == 808305848:
        await state.update_data(menu=message.text)
        await add_artifact_handler(message, state)
    else:
        await message.answer(f'–•–º, –∫–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–±–µ –Ω–µ –¥–∞–≤–∞–ª–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π —Å–≤–æ–∏ –ø—Ä–∞–≤–∞...')
        await state.set_state(fsm.menu)


@dp.message(fsm.tasks)
async def tasks(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    cursor.execute('SELECT level FROM users WHERE user_id=?', (user_id,))
    user_level = cursor.fetchone()

    if user_level:
        user_level = user_level[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏, –≥–¥–µ level_required <= —É—Ä–æ–≤–Ω—é –∏–≥—Ä–æ–∫–∞
        cursor.execute('SELECT * FROM tasks WHERE level_required <= ?', (user_level,))
        tasks = cursor.fetchall()
        buttons = []
        row = []
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        tasks_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            task_id, name, description, level_required, stamina_cost, duration, reward_money, reward_experience, reward_artifact_chance = task
            tasks_message += (f"{name}\n"
                              f"{description}\n"
                              f"üíø –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {level_required}\n"
                              f"üî• –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: {stamina_cost}\n"
                              f"üïî –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration} –º–∏–Ω—É—Ç\n"
                              f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ (–¥–µ–Ω—å–≥–∏): {reward_money}\n"
                              f"üí° –ù–∞–≥—Ä–∞–¥–∞ (–æ–ø—ã—Ç): {reward_experience}\n\n")
            row.append(KeyboardButton(text=name))
            if len(row) == 2:
                buttons.append(row)
                row = []

        if row:
            buttons.append(row)
        buttons.append([KeyboardButton(text='üîô –î–æ–º–æ–π')])
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await message.answer(tasks_message, reply_markup=keyboard)
        await state.set_state(fsm.tasks_init)
    else:
        await message.answer("–í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∏–≥—Ä–µ.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()


@dp.message(fsm.tasks_init)
async def tasks_init(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    cursor.execute('SELECT level FROM users WHERE user_id=?', (user_id,))
    user_level = cursor.fetchone()
    if user_level:
        user_level = user_level[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏, –≥–¥–µ level_required <= —É—Ä–æ–≤–Ω—é –∏–≥—Ä–æ–∫–∞
        cursor.execute('SELECT * FROM tasks WHERE level_required <= ?', (user_level,))
        tasks = cursor.fetchall()
        task_names = [task[1] for task in tasks]

        if message.text in task_names:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–¥–∞—á—É
            cursor.execute('SELECT * FROM user_tasks WHERE user_id=?', (user_id,))
            current_task = cursor.fetchone()
            if current_task:
                await message.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞—á—É. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                conn.close()
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            cursor.execute('SELECT * FROM tasks WHERE name=?', (message.text,))
            task = cursor.fetchone()
            if task:
                task_id, name, description, level_required, stamina_cost, duration, reward_money, reward_experience, reward_artifact_chance = task

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT endurance FROM users WHERE user_id=?', (user_id,))
                user_stamina = cursor.fetchone()[0]
                if user_stamina < stamina_cost:
                    await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
                    conn.close()
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_stamina = user_stamina - stamina_cost
                cursor.execute('UPDATE users SET endurance=? WHERE user_id=?', (new_stamina, user_id))

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ user_tasks
                end_time = datetime.now() + timedelta(minutes=duration)
                cursor.execute('INSERT INTO user_tasks (user_id, task_id, end_time) VALUES (?, ?, ?)',
                               (user_id, task_id, end_time))

                conn.commit()
                conn.close()

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                asyncio.create_task(complete_task(user_id, task_id, end_time))

                await message.answer(f"–í—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{name}'. –û–Ω–∞ –∑–∞–π–º–µ—Ç {duration} –º–∏–Ω—É—Ç.")
            else:
                await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            if message.text == 'üîô –î–æ–º–æ–π':
                stats_message = return_home(message)
                await message.answer(f'root@HackerWars:/$\n\n{stats_message}', reply_markup=kb.main_menu)
                await state.set_state(fsm.menu)
            else:
                await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        await message.answer("–í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∏–≥—Ä–µ.")
        conn.close()


async def complete_task(user_id, task_id, end_time):
    await asyncio.sleep((end_time - datetime.now()).total_seconds())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    cursor.execute('SELECT * FROM tasks WHERE id=?', (task_id,))
    task = cursor.fetchone()
    if task:
        _, name, description, level_required, stamina_cost, duration, reward_money, reward_experience, reward_artifact_chance = task

        # –í—ã–¥–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute('UPDATE users SET money=money+?, experience=experience+? WHERE user_id=?',
                       (reward_money, reward_experience, user_id))

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ user_tasks
        cursor.execute('DELETE FROM user_tasks WHERE user_id=?', (user_id,))

        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id,
                               f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á—É '{name}'. –ù–∞–≥—Ä–∞–¥–∞: {reward_money} –¥–µ–Ω–µ–≥, {reward_experience} –æ–ø—ã—Ç–∞.")
    else:
        conn.close()


@dp.message(fsm.web)
async def web_handler(message: Message, state: FSMContext):
    await state.set_state(fsm.web)
    if message.text in ["üè™ –ú–∞–≥–∞–∑–∏–Ω", "üé™ –ö–∞–∑–∏–Ω–æ", "üîô –î–æ–º–æ–π"]:
        if message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω":
            await state.update_data(menu=message.text)
            await shop_command_handler(message, state)
        elif message.text == "üé™ –ö–∞–∑–∏–Ω–æ":
            await message.answer(f'–ö–∞–∑–∏–Ω–æ –ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –°–æ—á–∏, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏ –∑–¥–µ—Å—å!')
            await state.set_state(fsm.web)
        elif message.text == 'üîô –î–æ–º–æ–π':
            stats_message = return_home(message)
            await message.answer(f'root@HackerWars:/$\n\n{stats_message}', reply_markup=kb.main_menu)
            await state.set_state(fsm.menu)
    else:
        await message.answer(f'–•–º, –∫–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–±–µ –Ω–µ –¥–∞–≤–∞–ª–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π —Å–≤–æ–∏ –ø—Ä–∞–≤–∞...')
        await state.set_state(fsm.menu)


@dp.message(fsm.shop)
async def shop_command_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT level FROM users WHERE user_id=?', (message.from_user.id,))
    user_level = cursor.fetchone()

    if not user_level:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
        conn.close()
        return

    user_level = user_level[0]

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –≥–¥–µ req_lvl >= user_level
    cursor.execute('SELECT * FROM artifacts WHERE req_lvl <= ?', (user_level,))
    artifacts = cursor.fetchall()
    conn.close()
    encod = {
        "attack": "‚öîÔ∏è –ê—Ç–∞–∫–∞",
        "defense": "üõ° –ó–∞—â–∏—Ç–∞",
        "camouflage": "üì∫ –ö–∞–º—É—Ñ–ª—è–∂",
        "search": "üî≠ –ü–æ–∏—Å–∫",
        "agility": "üíª –õ–æ–≤–∫–æ—Å—Ç—å",
        "endurance": "üîã –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"
    }

    if not artifacts:
        await message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
        return

    shop_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n"
    for artifact in artifacts:
        art_id, art_name, art_cost, art_attack, art_defense, art_camouflage, art_search, art_agility, art_endurance, art_req_lvl = artifact

        artifact_info = f"{art_id} {art_name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {art_cost} –º–æ–Ω–µ—Ç\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        if art_attack != 0:
            artifact_info += f"{encod['attack']}: {art_attack}\n"
        if art_defense != 0:
            artifact_info += f"{encod['defense']}: {art_defense}\n"
        if art_camouflage != 0:
            artifact_info += f"{encod['camouflage']}: {art_camouflage}\n"
        if art_search != 0:
            artifact_info += f"{encod['search']}: {art_search}\n"
        if art_agility != 0:
            artifact_info += f"{encod['agility']}: {art_agility}\n"
        if art_endurance != 0:
            artifact_info += f"{encod['endurance']}: {art_endurance}\n"

        artifact_info += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        shop_message += artifact_info
    await message.answer(shop_message)
    await state.set_state(fsm.buy)


@dp.message(fsm.add_art)
async def add_artifact_handler(message: Message, state: FSMContext) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_artifact <name> <cost> <attack> <defense> <camouflage> <search> <agility> <endurance>
    """
    try:
        parts = message.text.split(maxsplit=9)
        name, cost, attack, defense, camouflage, search, agility, endurance, req_lvl = parts[1], int(parts[2]), int(
            parts[3]), int(parts[4]), int(parts[5]), int(parts[6]), int(parts[7]), int(parts[8]), int(parts[9])
    except (IndexError, ValueError):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /add_artifact [name] [cost] [attack] [defense] [camouflage] [search] [agility] [endurance] [req_lvl]")
        return

    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO artifacts (name, cost, attack, defense, camouflage, search, agility, endurance, req_lvl)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (name, cost, attack, defense, camouflage, search, agility, endurance, req_lvl))
    conn.commit()
    conn.close()

    await message.answer(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω.")


@dp.message(fsm.buy)
async def buy_command_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ –µ–≥–æ ID –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    args = message.text
    create_user_artifacts_table()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º (ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞) –∏–ª–∏ –Ω–µ—Ç
    try:
        artifact_id = int(args)
    except ValueError:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω":
            await state.update_data(menu=message.text)
            await shop_command_handler(message, state)
        elif message.text == "üé™ –ö–∞–∑–∏–Ω–æ":
            await message.answer(f'–ö–∞–∑–∏–Ω–æ –ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –°–æ—á–∏, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏ –∑–¥–µ—Å—å!')
            await state.set_state(fsm.web)
        elif message.text == 'üîô –î–æ–º–æ–π':
            stats_message = return_home(message)
            await message.answer(f'root@HackerWars:/$\n\n{stats_message}', reply_markup=kb.main_menu)
            await state.set_state(fsm.menu)
        else:
            await message.answer("ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 1")
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT level FROM users WHERE user_id=?', (message.from_user.id,))
    user_level = cursor.fetchone()
    cursor.execute('SELECT * FROM artifacts WHERE id = ? AND req_lvl <= ?', (artifact_id, user_level[0]))
    artifact = cursor.fetchone()
    if not artifact:
        await message.answer("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    cursor.execute('SELECT * FROM user_artifacts WHERE user_id=? AND artifact_id=?',
                   (message.from_user.id, artifact_id))
    existing_artifact = cursor.fetchone()
    if existing_artifact:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç.")
        conn.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    if not user_data:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
        conn.close()
        return

    user_money = user_data[5]
    artifact_cost = artifact[2]

    if user_money < artifact_cost:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.")
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_balance = user_money - artifact_cost
    cursor.execute('UPDATE users SET money=? WHERE user_id=?', (new_balance, message.from_user.id))

    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('INSERT INTO user_artifacts (user_id, artifact_id) VALUES (?, ?)',
                   (message.from_user.id, artifact_id))

    conn.commit()
    conn.close()
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞
    update_player_stats(message.from_user.id, artifact_id)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç {artifact[1]} –∑–∞ {artifact_cost} –º–æ–Ω–µ—Ç.",
                         reply_markup=kb.main_menu)
    await state.set_state(fsm.menu)


def update_player_stats(user_id, artifact_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ
    cursor.execute('SELECT * FROM artifacts WHERE id = ?', (artifact_id,))
    artifact_data = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    user_data = cursor.fetchone()

    if not artifact_data or not user_data:
        # –ï—Å–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        conn.close()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    new_attack = user_data[9] + artifact_data[3]
    new_defense = user_data[10] + artifact_data[4]
    new_camouflage = user_data[11] + artifact_data[5]
    new_search = user_data[12] + artifact_data[6]
    new_agility = user_data[13] + artifact_data[7]
    new_endurance = user_data[14] + artifact_data[8]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        UPDATE users 
        SET 
            attack=?, 
            defense=?, 
            camouflage=?, 
            search=?, 
            agility=?, 
            endurance=?
        WHERE 
            user_id=?
    ''', (new_attack, new_defense, new_camouflage, new_search, new_agility, new_endurance, user_id))

    conn.commit()
    conn.close()


def return_home(message):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_message = (
        f"üë§ {hbold(user_data[4])} ({user_data[6]}):\n"
        f"üíø –£—Ä–æ–≤–µ–Ω—å: {user_data[7]}\n"
        f"üí° –û–ø—ã—Ç: {user_data[8]}\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {user_data[5]}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {user_data[9]}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {user_data[10]}\n"
        f"üì∫ –ö–∞–º—É—Ñ–ª—è–∂: {user_data[11]}\n"
        f"üî≠ –ü–æ–∏—Å–∫: {user_data[12]}\n"
        f"üíª –õ–æ–≤–∫–æ—Å—Ç—å: {user_data[13]}\n"
        f"üîã –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data[14]}\n"
    )

    return stats_message


@dp.message()
async def echo_handler(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            stats_message = return_home(message)
            await message.answer(f'root@HackerWars:/$\n\n{stats_message}', reply_markup=kb.main_menu)
            await state.set_state(fsm.menu)
            return
    except TypeError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
