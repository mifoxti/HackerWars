# bot.py

import json
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.types import ReplyKeyboardRemove
import app.keyboards as kb


class Reg(StatesGroup):
    name = State()
    fraction = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.json
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

TOKEN = config['telegram']['api_token']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
db_filename = 'users.db'


def create_users_table():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É 'users' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
    –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤–∫–ª—é—á–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –≤ –∏–≥—Ä–µ.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            full_name TEXT,
            game_name TEXT,
            money INTEGER,
            faction TEXT,
            level INTEGER,
            experience INTEGER,
            attack INTEGER,
            defense INTEGER,
            camouflage INTEGER,
            search INTEGER,
            agility INTEGER,
            endurance INTEGER
        )
    ''')
    conn.commit()
    conn.close()


def register_user(user: types.User, game_name: str, faction: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO users (
            user_id, username, full_name, game_name, money, faction,
            level, experience, attack, defense, camouflage,
            search, agility, endurance
        ) VALUES (?, ?, ?, ?, 1000, ?, 1, 0, 0, 0, 0, 0, 0, 0)
    ''', (user.id, user.username, user.full_name, game_name, faction))
    conn.commit()
    conn.close()


@dp.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –º–∏—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Å—Ä–∞–∂–µ–Ω–∏–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–∫ —Ö–∞–∫–µ—Ä–æ–≤ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å "
                         "–Ω–∞ –ø–∞—Ä—É –º–æ–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞—á–Ω–µ–º?")


@dp.message(Command('reg'))
async def command_reg_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–≥—Ä–æ–≤–æ–µ –∏–º—è –∏ –≤—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    create_users_table()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
        return
    await state.set_state(Reg.name)
    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –∏–º—è:")

    # register_user(message.from_user, game_name.text, faction.text)


@dp.message(F.text == "–Ø —Ç—É—Ç ")
async def stats_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏–≥—Ä–µ.
    """
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_message = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {hbold(user_data[3])}:\n"
        f"–§—Ä–∞–∫—Ü–∏—è: {user_data[5]}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {user_data[6]}\n"
        f"–û–ø—ã—Ç: {user_data[7]}\n"
        f"–ê—Ç–∞–∫–∞: {user_data[8]}\n"
        f"–ó–∞—â–∏—Ç–∞: {user_data[9]}\n"
        f"–ö–∞–º—É—Ñ–ª—è–∂: {user_data[10]}\n"
        f"–ü–æ–∏—Å–∫: {user_data[11]}\n"
        f"–õ–æ–≤–∫–æ—Å—Ç—å: {user_data[12]}\n"
        f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data[13]}\n"
    )
    await message.answer(stats_message)


@dp.message(Reg.name)
async def reg_second(message: Message, state: FSMContext):
    print(type(message.text))
    if message.text != None:
        await state.update_data(name=message.text)
        await state.set_state(Reg.fraction)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é:', reply_markup=kb.main)
    else:
        await state.clear()
        await message.answer('–ù—É, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –Ω–µ –≤—Å–µ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ—ë –∏–º—è....',
                             reply_markup=ReplyKeyboardRemove())


@dp.message(Reg.fraction)
async def second_third(message: Message, state: FSMContext):
    if message.text in [
        "üé≠ Phantoms",
        "‚òÆÔ∏è Liberty",
        "üí† Aegis",
        "üóø NotFounds"
    ]:
        await state.update_data(fractions=message.text)
        data = await state.get_data()
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ò–º—è: {data["name"]}\n–§—Ä–∞–∫—Ü–∏—è: {data["fractions"]}')
        await state.clear()
    else:
        await message.answer(f'–¢—ã –¥–∞–∂–µ —Å —Ç–∞–∫–∏–º –ø—Ä–æ—Å—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è...\n–ö–∞–∫–æ–π –∏–∑ —Ç–µ–±—è —Ö–∞–∫–µ—Ä')
        await state.clear()


@dp.message()
async def echo_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")


async def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)
